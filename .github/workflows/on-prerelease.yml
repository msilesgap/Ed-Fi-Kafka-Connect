# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: On Pre-Release
on:
  release:
    types:
      - prereleased
  workflow_dispatch:

env:
  #ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  #ARTIFACTS_FEED_URL: "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json"
  #VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint": "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json","password": "${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}"}]}'
  MANIFEST_FILE: "_manifest/spdx_2.2/manifest.spdx.json"
  PACKAGE_NAME: "ed-fi-kafka-connect-transforms"
  #IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  #DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  #DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  REF: ${{ github.ref_name }}

permissions: read-all

jobs:
  pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        working-directory: kafka/ed-fi-kafka-connect-transforms
    outputs:
      hash-code: ${{ steps.hash-code.outputs.hash-code }}
      dms-version: ${{ steps.versions.outputs.dms-v }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Set Version Numbers      
        id: versions
        working-directory: ./
        run: |
          Import-Module ./package-helpers.psm1
          Get-VersionNumber

      - name: Setup Java
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with: 
          java-version: '17'
          distribution: 'temurin'
  
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@d9c87d481d55275bb5441eef3fe0e46805f9ef70 # v3.5.0

      - name: Generate Gradle wrapper
        run: gradle wrapper        

      - name: Make gradlew executable
        run: chmod +x ./gradlew   

      - name: Build with Gradle
        run: ./gradlew clean build            

      #- name: Publish Jar Package
      #  working-directory: ./kafka 
      #  run: |
      #    $packageVersion = "${{ steps.versions.outputs.dms-semver }}"      
      #    ./gradlew clean build    
      #gradle installDist --no-daemon

      #./build.ps1 -Command BuildAndPublish `
      #        -Configuration Release `
      #        -DMSVersion $packageVersion

      #NOT Need it, review if war is required
      #- name: Create NuGet Package
      #  run: |
      #    $packageVersion = "${{ steps.versions.outputs.dms-semver }}"

          #./build.ps1 -Command Package `
           #   -DMSVersion $packageVersion `
            #  -Configuration Release

      #- name: Generate hash for NuGet package
      #  id: hash-code
      #  run: |
      #    "hash-code=$(sha256sum *.nupkg | base64 -w0)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Packages as Artifacts
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          #name: "${{ env.PACKAGE_NAME }}"
          #name: "ed-fi-kafka-connect-transforms-"
          name: "Package"
          #path: ${{ github.workspace }}/*.jar
          path: ./kafka/ed-fi-kafka-connect-transforms/build/libs
          if-no-files-found: error
          retention-days: 30

  sbom-create:
    name: Create SBOM
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    needs: pack
    permissions:
      actions: read
      contents: write
    outputs:
      sbom-hash-code: ${{ steps.sbom-hash-code.outputs.sbom-hash-code }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get Artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 #v4.1.1
        with:
          #name: ${{ env.PACKAGE_NAME }}
          name: ${{ env.PACKAGE_NAME }}

      - name: Gen SBOM
        uses: advanced-security/generate-sbom-action@v1
        id: gensbom

      - name: Upload SBOM
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ env.PACKAGE_NAME }}-SBOM
          path: ${{ env.MANIFEST_FILE }}
          if-no-files-found: error
          retention-days: 30

      - name: Generate hash code for SBOM
        id: sbom-hash-code
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          sbom_hash=$(sha256sum ./${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          echo "sbom-hash-code=$sbom_hash" >> $GITHUB_OUTPUT          
